@page "/register"

@using FluentValidation
@using MudBlazor
@using RecipeManager.Shared.Contracts.User.Registration
@using RecipeManager.UI.Blazor.Components.Extensions
@using RecipeManager.UI.Blazor.Services

@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IdentityApiService IdentityApi

<MudPaper Class="pa-6 mx-auto" MaxWidth="400px">
    <MudForm Model="@registrationModel" Validation="@(validator.ValidateValue)" ValidationDelay="0" @bind-IsValid="@isSubmitEnabled">
        <MudText Typo="Typo.h5" Class="mb-4">Register</MudText>

        <MudTextField @bind-Value="registrationModel.UserName" Label="Username" For="@(() => registrationModel.UserName)" Required=true/>
        <MudTextField @bind-Value="registrationModel.Email" Label="Email" For="@(() => registrationModel.Email)"  Required=true/>
        <MudTextField @bind-Value="registrationModel.Password" Label="Password" For="@(() => registrationModel.Password)" InputType="InputType.Password" Required=true />
        <MudTextField @bind-Value="registrationModel.ConfirmationPassword" Label="Confirmation Password" For="@(() => registrationModel.ConfirmationPassword)" InputType="InputType.Password" Required=true />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSubmit" Disabled="@(!isSubmitEnabled)" Class="mt-4" FullWidth>
            Register
        </MudButton>
        <MudText ReadOnly="true" Color="Color.Error">@errorMessage</MudText>

        <MudGrid AlignItems="AlignItems.Center" Class="mt-6">
            <MudItem xs="12" Class="d-flex justify-space-between align-center mt-4">
                <MudText Typo="Typo.body1">Not a member yet?</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="NavigateToLoginPage">
                    Sign In
                </MudButton>
            </MudItem>
        </MudGrid>

    </MudForm>
</MudPaper>

@code {
    private UserRegistrationModel registrationModel = new();
    private readonly UserRegistrationValidator validator = new();
    private bool isSubmitEnabled = false;
    private string errorMessage = "";

    private async Task OnSubmit()
    {
        await IdentityApi.RegisterUser(registrationModel);
    }

    private void NavigateToLoginPage()
    {
        Navigation.NavigateTo("/login");
    }

    public class UserRegistrationValidator : AbstractValidator<UserRegistrationModel>
    {
        public UserRegistrationValidator()
        {

            RuleFor(x => x.UserName).SetValidator(new UserNameValidator());
            RuleFor(x => x.Email).SetValidator(new EmailValidator());
            RuleFor(x => x.Password).SetValidator(new PasswordValidator());
            RuleFor(x => x.ConfirmationPassword).Equal(x => x.Password)
                .WithMessage("Confirmation password must match the password.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserRegistrationModel>.CreateWithOptions((UserRegistrationModel)model, x => x.IncludeProperties(propertyName)));

            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}