@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@using RecipeManager.UI.Blazor.Services.Authorization

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        @if (showSideMenu)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        }
        <MudText Typo="Typo.h5" Class="ml-3">Recipes Manager</MudText>
        <MudSpacer />
    </MudAppBar>

    <MudDrawer @bind-Open="showSideMenu" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool showSideMenu = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await ((CustomAuthenticationStateProvider)AuthStateProvider).GetAuthenticationStateAsync();
            bool isUserAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;

            if (!isUserAuthenticated)
            {
                Navigation.NavigateTo("/login");
            }

            showSideMenu = isUserAuthenticated;
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/login", true);
            Console.WriteLine($"Error during authentication: {ex.Message}");
        }
    }

    private void DrawerToggle()
    {
        showSideMenu = !showSideMenu;
    }
}
